c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      udiff  = 0.
      utrans = 0.

      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      
      ffx = 0.
      ffy = 0.
      ffz = 0.

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      qvol   = 0.0
      source = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'
      include 'NEKNEK'
      common /myoutflow/ d(lx1,ly1,lz1,lelt),m1(lx1*ly1*lz1,lelt)
      real m1
      integer f,e


      rq  = 1.5
      uin = 0.
      call turb_outflow(d,m1,rq,uin)

c     Prescribe mesh motion 
      if (istep.eq.0) call opzero(wx,wy,wz)

      call my_mesh_velocity

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'NEKNEK'

      integer ie,ieg
      integer icalld
      save    icalld
      data    icalld /0/

      ie = gllel(ieg)

      if (imask(ix,iy,iz,ie).eq.0) then
         if (IFMVBD) then !Moving
            call u_meshv(x,y,ux,uy,time)
         else                                   
           ux=1.
           uy=0.
           uz=0.
         endif
         temp=0.0
      else
         ux = valint(ix,iy,iz,ie,1)
         uy = valint(ix,iy,iz,ie,2)
         uz = valint(ix,iy,iz,ie,3)
         pa = valint(ix,iy,iz,ie,3)
         if (nfld_neknek.gt.3) temp = valint(ix,iy,iz,ie,4)
      endif
         

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux=0.0
      uy=0.0
      uz=0.0
      temp=0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'
      include 'NEKNEK'

      ngeom = 3
      ninter = 1
      nfld_neknek=3

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      common /irotorient/ irotdir
      integer irotdir
      parameter(nxyz = lx1*ly1*lz1)

      parameter(lt=lx1*ly1*lz1*lelt)
      common /qcruz/ ox(lx1,ly1,lz1,lelv),oy(lx1,ly1,lz1,lelv),oz(lt)
     $             , dx(lx1,ly1,lz1,lelv),dy(lx1,ly1,lz1,lelv),dz(lt)

      call opcopy(ox,oy,oz,xm1,ym1,zm1)

      param(59) = 1         ! all elements deformed
      ifxyo    = .true.     ! ensure output of geometry
      ifusermv = .true.     ! define our own mesh velocity
      call fix_geom
      xmax_ms = glamax_ms(xm1,lx1*ly1*lz1*nelv)
      xmax = glmax(xm1,lx1*ly1*lz1*nelv)
      if (xmax.lt.19.) then
       xmax = glmax(xm1,lx1*ly1*lz1*nelv)
       cirloc = 2.
       irotdir = 1
       if (xmax.lt.1) then
        cirloc = -2.
        irotdir = -1
       endif
       do ie=1,nelv
       do ifac=1,2*ldim
        if (cbc(ifac,ie,1).eq.'int') then
          call facind (i0,i1,j0,j1,k0,k1,nx1,ny1,nz1,ifac)
          do k=k0,k1
          do j=j0,j1
          do i=i0,i1
            xv = xm1(i,j,k,ie)-cirloc
            yv = ym1(i,j,k,ie)
            rv = sqrt(xv**2 + yv**2)
            tv = atan2(yv,xv)
            ox(i,j,k,ie) = cirloc + 2.5*cos(tv)
            oy(i,j,k,ie) = 2.5*sin(tv)
          enddo
          enddo
          enddo
         endif
       enddo
       enddo
     
      endif

c      write(6,*) idsess,irotdir,'k10c'
c      call exitt

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      return
      end
c-----------------------------------------------------------------------
      subroutine my_mesh_velocity
      include 'SIZE'
      include 'TOTAL'

      if (IFMVBD) then                        !Moving mesh
         n=nx1*ny1*nz1*nelv
         do i=1,n
            x = xm1(i,1,1,1)
            y = ym1(i,1,1,1)
            call u_meshv(x,y,ux,uy,time)
            wx(i,1,1,1) = ux
            wy(i,1,1,1) = uy
         enddo
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine u_meshv(x,y,wx,wy,time)
      include 'SIZE'
      real rpm
      common /irotorient/ irotdir
      integer irotdir
      
      one          = 1.0
      pi           = 4.0*atan(one)
      rpm          = 1.     !1 revolution per minute
      omega        = rpm*2*pi/60.

      cirloc = 2.
      yc = 0.
      xc = -cirloc
      fac = 1.
      if (irotdir.eq.1) then
       xc = cirloc
       fac = -1.
      endif
      rv = sqrt((x-xc)**2 + (y-yc)**2)
      thv = atan2(y-yc,x-xc)
      if (thv.lt.0) thv = thv + 2.*pi
      vtheta = omega*rv
    
      wx = -vtheta*sin(thv)*fac
      wy = vtheta*cos(thv)*fac

      return
      end
c-----------------------------------------------------------------------
      subroutine my_mv_mesh(dx,dy,dz)
      include 'SIZE'
      include 'TOTAL'

      parameter (lt = lx1*ly1*lz1*lelv)
      common /mrthoi/ napprx(2),nappry(2),napprz(2)
      common /mrthov/ apprx(lt,0:mxprev)
     $              , appry(lt,0:mxprev)
     $              , apprz(lt,0:mxprev)
      common /mstuff/ d(lt),h1(lt),h2(lt),mask(lt)
      real mask
      real mask2(lx1,ly1,lz1,lelv)
      real dx(1),dy(1),dz(1)

      integer e,f

      integer icalld
      save    icalld
      data    icalld /0/

      n = nx1*ny1*nz1*nelv
      nface = 2*ndim

      napprx(1)=0
      nappry(1)=0
      napprz(1)=0

      nxz   = nx1*nz1
      nxyz  = nx1*ny1*nz1

      volbl = 0.   ! Volume of elements in boundary layer
      do e=1,nelv
      do f=1,nface
         if (cbc(f,e,1).eq.'int') then
            srfbl = srfbl + vlsum(area(1,1,f,e),nxz )
            volbl = volbl + vlsum(bm1 (1,1,1,e),nxyz)
         endif
      enddo
      enddo
      srfbl = glsum(srfbl,1)  ! Sum over all processors
      volbl = glsum(volbl,1)

      delta = volbl / srfbl   ! Avg thickness of b.l. elements

      call rone (h1,n)
      call rzero(h2,n)
      call cheap_dist(d,1,'int')

      deltap = 5*delta  ! Protected b.l. thickness
      do i=1,n
         arg   = -(d(i)/deltap)**2
         h1(i) = h1(i) + 9*exp(arg)
      enddo

      call rone(mask,n)
      do e=1,nelv
      do f=1,nface
        if (cbc(f,e,1).ne.'E  ') call facev(mask,e,f,0.,nx1,ny1,nz1)
      enddo
      enddo
      call dsop(mask,'mul',nx1,ny1,nz1)
      call copy(mask2,mask,n)
      call chsign(mask2,n)
      call cadd(mask2,1.,n)
      call col2(dx,mask2,n)
      call col2(dy,mask2,n)
      call col2(dz,mask2,n)
      tol = -1.e-6
      call laplaceh('mshx',dx,h1,h2,mask,vmult,1,tol,500,apprx,napprx)
      call laplaceh('mshy',dy,h1,h2,mask,vmult,1,tol,500,appry,nappry)
      if (if3d)
     $ call laplaceh('mshz',dz,h1,h2,mask,vmult,1,tol,500,apprz,napprz)

      return
      end
c-----------------------------------------------------------------------
      subroutine laplaceh
     $     (name,u,h1,h2,mask,mult,ifld,tli,maxi,approx,napprox)
      include 'SIZE'
      include 'TOTAL'
      include 'CTIMER'
c
      character*4 name
      real u(1),h1(1),h2(1),mask(1),mult(1),approx (1)
      integer   napprox(1)

      parameter (lt=lx1*ly1*lz1*lelv)
      common /scruz/ r (lt),ub(lt)

      logical ifstdh
      character*4  cname
      character*6  name6

      logical ifwt,ifvec

      call chcopy(cname,name,4)
      call capit (cname,4)

      call blank (name6,6)
      call chcopy(name6,name,4)
      ifwt  = .true.
      ifvec = .false.
      isd   = 1
      imsh  = 1
      nel   = nelfld(ifld)

      n = nx1*ny1*nz1*nel

      call copy (ub,u,n)             ! ub = u on boundary
      call dsavg(ub)                 ! Make certain ub is in H1
                                     !     _
      call axhelm (r,ub,h1,h2,1,1)   ! r = A*ub

      do i=1,n                       !        _
         r(i)=-r(i)*mask(i)          ! r = -M*A*ub
      enddo

      call dssum  (r,nx1,ny1,nz1)    ! dssum rhs

      call project1
     $    (r,n,approx,napprox,h1,h2,mask,mult,ifwt,ifvec,name6)

      tol = -abs(tli)
      if (nel.eq.nelv) then
        call hmhzpf (name,u,r,h1,h2,mask,mult,imsh,tol,maxi,isd,binvm1)
      else
        call hmhzpf (name,u,r,h1,h2,mask,mult,imsh,tol,maxi,isd,bintm1)
      endif

      call project2
     $     (u,n,approx,napprox,h1,h2,mask,mult,ifwt,ifvec,name6)

      call add2(u,ub,n)

      return
      end
c-----------------------------------------------------------------------

